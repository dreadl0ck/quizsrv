- question: Explain indexed memory addressing
  answer: |
    Operand is a base memory address to which the value in the index register is added.
    Example: LD A 500+X
- question: Explain immediate memory addressing
  answer: |
    Operand is a value.
    Example: LD A #5
- question: Explain relative memory addressing
  answer: |
    Operand is a memory address relative to the address in the program counter.
    Example: BR +3
- question: Explain direct memory addressing
  answer: |
    Operand is an effective memory address.
    Example: LD A 500
- question: Explain register indirect memory addressing
  answer: |
    Operand is a CPU register that contains a memory address.
    Example: LD A (R1)
- question: Explain register direct memory addressing
  answer: |
    Operand is a CPU register that contains a value.
    Example: LD A R1
- question: Explain indirect memory addressing
  answer: |
    Operand is a memory address that contains the effective memory address.
    Example: LD A (501)
- question: What does the _ret_ instruction do?
  answer: |
    Pops the return address (pc = program counter) from the stack.
- question: What does the _call_ instruction do?
  answer: |
    Pushes the return (pc = program counter) address onto the stack
    and then jumps to the specified address.
- question: What does paging do?
  answer: |
    Translates _linear_ to _logical_ addresses.
- question: What does segmentation do?
  answer: |
    Translates _logical_ to _linear_ addresses.
    Deprecated in x86.
- question: Which command can be used to follow library calls?
  answer: |
    ltrace
- question: Which command can be used to follow system calls?
  answer: |
    strace
- question: Which architecture introduced the syscall instruction?
  answer: |
    x86_64
- question: First teletyper model without punchcards?
  answer: |
    v33
- question: Maximum level of recursion for an interpreter in Linux?
  answer: |
    4
- question: What is the purpose of the _.interp_ ELF section?
  answer: |
    The _.interp_ section contains the DLLs.
- question: Whats the entry point of an ELF executable?
  answer: |
    _start
- question: The x86 ISA does not make use of which addressing mode?
  answer: |
    The memory indirect addressing.
    Using pointers to pointers is inffecient,
    because it leads to two fetch operations for a single instruction.
- question: When compiling on a 64 bit machine for 32 bit architecture, the use of _%rax_ in assembly causes?
  answer: |
    Compilation will fail, _%rax_ does not exists on 32 bit.
- question: What does pty stand for?
  answer: |
    pseudo terminal
- question: Starting an SSH session in an xterm window involves how many ptys?
  answer: |
    2 - one local and one remote pseudo terminal.
- question: Which system call is considered a quick hack?
  answer: |
    _vfork_
    _fork_ is computationally expensive because it copies all resources.
    _clone_ is the proper replacement.
- question: Which step is not part of compilation?
  answer: |
    Loading of dynamic libraries - happens at runtime.
- question: What parts of an ELF file are used during runtime?
  answer: |
    Segments
- question: What parts of an ELF file are used during linking?
  answer: |
    Sections
- question: In an ELF file, what are segments?
  answer: Segments are a clustering of sections that are loaded into memory during runtime
- question: Whats the name of the executable file format used by Linux?
  answer: |
    ELF

- question: How many Microsoft engineers does it take to screw in a light bulb?
  answer: None. They just define darkness as an industry standard.
- question: How many Macintosh engineers does it take to screw in a light bulb?
  answer: None - it has to be done by a local authorized dealer.

- question: Name the syscalls in correct order that are used by a shell that executes a command
  answer: |
    _stat_, _fork_, _execve_
- question: Name the path for the first device corresponding to the slave side of a pseudo terminal.
  answer: |
    /dev/pts/0
- question: Whats the master side of a pseudo terminal?
  answer: |
    /dev/ptmx
- question: Physical Address Extension (PAE) extends the possible memory space to?
  answer: |
    64 GiB
- question: Intel 8086 Segmentation can address?
  answer: |
    0x10FFF0 memory addresses.
    0x10FFEF (max addr space) + 1 (counting starts at zero).
- question: The ARM architecture belongs to the category?
  answer: |
    RISC (Reduced Instruction Set Computer)
- question: When the kernel starts an application, which values are pushed to the stack?
  answer: |
    1. Auxiliary Vector
    2. Environment Vector
    3. Argument Vector

- question: Whats the entrypoint in crt1.o of an ELF executable?
  answer: |
    *_start*
    crt is the C runtime.
- question: What are the 4 steps involved in compilation?
  answer: |
    1. Preprocessing
    2. Compilation (=AST generation)
    3. Assembly Generation
    4. Linking
- question: The vDSO is part of what?
  answer: |
    It's part of the auxiliary vector.
- question: When was the x86 instruction set created?
  answer: |
    2003 by AMD
- question: What are the different memory addressing modes?
  answer: |
    - immediate
    - register direct / indirect
    - memory direct / indirect
    - indexed

- question: What does MBR stand for?
  answer: Master Boot Record

- question: What is the size of the MBR in bytes?
  answer: 512

- question: Name the signature in the last two bytes of the MBR in hex
  answer: 0xAA55

- question: What are the last 4 bits of the MBR?
  answer: 1010

- question: What system call does the shell use to ensure the executed command wont end up as a zombie?
  answer: _wait_

- question: How is a process called that is reclaimed by init after the parent exited?
  answer: Orphan
- question: How is a process called that exited without the parent process reading its exit status?
  answer: Zombie

- question: What new register was introduced in the Intel 8080, compared to the 8008?
  answer: The internal 7-level push-down call stack of the 8008 was replaced by a dedicated 16-bit stack-pointer (SP) register.

- question: What is PSE?
  answer: A feature of x86 processors that extends the physical memory addressing capabilities from 32 bits to 36 bits, allowing addressing to up to 64 GB of memory.

- question: How much physical memory can be adressed with PAE, but without PSE?
  answer: |
    PAE allows for page table entries of 64 bits each instead of 32.
    Therefore 2^64 bytes of physical memory can be addressed.

- question: What meta information does the stat system call return (list 5)?
  answer: device, inode nb, access mode, nb hard links, uid, guid, last modification time, access time

- question: What is the signature of the stat system call?
  answer: int stat(const char *pathname, struct stat *buf)

- question: What is the signature of the execve system call?
  answer: int execve(const char *filename, char *const argv[], char *const envp[])


- question: What does the stat system call do?
  answer: It displays a file or file system status

- question: What was used before the teletype model 33 ASR?
  answer: The model 32 which used 5-bit baudot code punchcards

- question: |
    .global _start
    .text
    _start:
      mov $60, %eax
      mov $42, %edi
      syscall

    Why does this program not compile in IA-32?
  answer: The syscall instruction doesn't exist in IA-32 because it was added in x86

- question: In what mode do all processors start?
  answer: Real mode (32-bit)

- question: In x86 how would you address the low order bits of the registers R8 to R15?
  answer: |
    Taking R8 as an example:
      R8D Double word (32-bit)
      R8W Word (16-bit)
      R8B Byte (8-bit)

- question: Which intel CPU introduces PAE?
  answer: Intel Pentium Pro

- question: When did the Intel 80386 come out?
  answer: 1986

- question: What did the Intel 80386 introduce?
  answer: The 80386 introduces the IA-32 bit ISA known as i386

- question: Why are the registers renamed from AX in the 8086 to EAX in the 80386?
  answer: The E stands for Extended because the registers grew from 16 to 32 bits

- question: Which Intel architecture introduced the trap register for debugging?
  answer: 8086

- question: How many bits is the Intel 8086 architecture made up of?
  answer: 16 bits

- question: In what year was the Intel 8008 made? Hoe many bits is its Program counter?
  answer: |
    1972
    6 + 8 = 14 bits which can be used for addressing

- question: In a CPU, what does the MMU do?
  answer: The Memory Management Unit does the translation between virtual and physical memory

- question: List 5 components of a CPU
  answer: |
    Registers
    Arithmetic Logic Unit (ALU)
    CU (Control Unit)
    Memory Management Unit (MMU)
    Caches

- question: What does a CPU do in a loop?
  answer: Fetch, decode, and execute instructions

- question: What gcc flag would you use to save all intermediary files?
  answer: --save-temps

- question: When running lsof on a shell process /dev/pts/0, why is the file /dev/pts/0 listed 3 times?
  answer: stdin, stdout, stderr

- question: What do the following commands do nm, strip, ldd & lsof? 
  answer: |
    nm - list symbols in an object file
    strip - remove symbols in an object file
    ldd - list dynamic dependencies
    lsof - list open files

- question: What flag does ldd set when opening a file?
  answer: LD_TRACE_LOADED_OBJECTS

- question: What's the difference between readelf & objdump?
  answer: Objdump can dissassemble

- question: Why do shared objects have a Position Independent Code (PIC) ?
  answer: Because shared objects have a fixed place in physical memory but a different place in virtual memory per process

- question: Are shared objects loaded eagerly or lazily during runtime?
  answer: Lazily

- question: Is the dynamic linking loader ld.so linked statically or dynamically?
  answer: statically

- question: What are the 2 kinds of executable files?
  answer: binary executables & interpreted scripts

- question: What does ELF stand for?
  answer: Executable and Linkable Format

- question: What is the oldest linux exectuable format?
  answer: a.out
